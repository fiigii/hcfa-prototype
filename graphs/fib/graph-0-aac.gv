digraph BST {
size="6,4" ; ratio = fill;
 "1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set())" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set()
 (x,List()) -> Set(NumTop))";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set())";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"'(unspecified)\n Env = Map(b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\norg.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$InitKAddr$@632f19fe" -> "Final(Set())";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "1\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"1\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set()
 (x,List()) -> Set(NumTop))" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set()
 (x,List()) -> Set(NumTop))";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))),Map(b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set()
 (x,List()) -> Set(NumTop))" -> "1\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set()
 (x,List()) -> Set(NumTop))";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))),Map(b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))),Map(b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))),Map(b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified)))))\n Env = Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\norg.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$InitKAddr$@632f19fe" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set()
 (x,List()) -> Set(NumTop))" -> "1\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set()
 (x,List()) -> Set(NumTop))";
"(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set()
 (x,List()) -> Set(NumTop))" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set()
 (x,List()) -> Set(NumTop))" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set()
 (x,List()) -> Set(NumTop))";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set())" -> "1\n Env = Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set())";
"(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let ((a '(unspecified)))  (let ((b '(unspecified)))  (let (($_$3 (set! fib (lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))))))  (let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))))))\n Env = Map(fib -> (fib,List()))\n  store hash = 1368014491\norg.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$InitKAddr$@632f19fe" -> "(let ((b '(unspecified)))  (let (($_$3 (set! fib (lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))))))  (let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified)))))))\n Env = Map(fib -> (fib,List()), a -> (a,List()))\n  store hash = 1368014491\norg.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$InitKAddr$@632f19fe";
"1\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"1\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))),Map(b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"1\n Env = Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set())" -> "(let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))\n Env = Map(b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\norg.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$InitKAddr$@632f19fe";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "1\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set()
 (x,List()) -> Set(NumTop))";
"1\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set()
 (x,List()) -> Set(NumTop))";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"1\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set()
 (x,List()) -> Set(NumTop))" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set())";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set()
 (x,List()) -> Set(NumTop))" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set())";
"(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))),Map(b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "1\n Env = Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))),Map(b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))),Map(b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set())" -> "(let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))\n Env = Map(b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\norg.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$InitKAddr$@632f19fe";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))),Map(b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"1\n Env = Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))),Map(b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($_$1 (set! b $tmp$4)))  '(unspecified))\n Env = Map(b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\norg.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$InitKAddr$@632f19fe";
"(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set()
 (x,List()) -> Set(NumTop))" -> "(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set()
 (x,List()) -> Set(NumTop))";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set()
 (x,List()) -> Set(NumTop))" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))\n Env = Map(b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\norg.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$InitKAddr$@632f19fe" -> "(let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified)))\n Env = Map(b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\norg.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$InitKAddr$@632f19fe";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"1\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "1\n Env = Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"1\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set()
 (x,List()) -> Set(NumTop))" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set()
 (x,List()) -> Set(NumTop))";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set()
 (x,List()) -> Set(NumTop))" -> "(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set()
 (x,List()) -> Set(NumTop))";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set())";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))),Map(b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($_$1 (set! b $tmp$4)))  '(unspecified))\n Env = Map(b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\norg.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$InitKAddr$@632f19fe";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set()
 (x,List()) -> Set(NumTop))" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set()
 (x,List()) -> Set(NumTop))";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "1\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))),Map(b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let ((fib '(unspecified)))  (let ((a '(unspecified)))  (let ((b '(unspecified)))  (let (($_$3 (set! fib (lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))))))  (let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified)))))))))\n Env = Map()\n  store hash = 1368014491\norg.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$InitKAddr$@632f19fe" -> "(let ((a '(unspecified)))  (let ((b '(unspecified)))  (let (($_$3 (set! fib (lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))))))  (let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))))))\n Env = Map(fib -> (fib,List()))\n  store hash = 1368014491\norg.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$InitKAddr$@632f19fe";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set()
 (x,List()) -> Set(NumTop))";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))\n Env = Map(b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\norg.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$InitKAddr$@632f19fe";
"(let (($_$3 (set! fib (lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))))))  (let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))))\n Env = Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))\n  store hash = 1368014491\norg.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$InitKAddr$@632f19fe" -> "(let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified)))))\n Env = Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\norg.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$InitKAddr$@632f19fe";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified)))))\n Env = Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\norg.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$InitKAddr$@632f19fe" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set())";
"(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set())" -> "(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set())";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "1\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set()
 (x,List()) -> Set(NumTop))";
"(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set()
 (x,List()) -> Set(NumTop))" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set()
 (x,List()) -> Set(NumTop))";
"(let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified)))\n Env = Map(b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\norg.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$InitKAddr$@632f19fe" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))),Map(b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let (($_$1 (set! b $tmp$4)))  '(unspecified))\n Env = Map(b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\norg.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$InitKAddr$@632f19fe" -> "'(unspecified)\n Env = Map(b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\norg.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$InitKAddr$@632f19fe";
"(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set()
 (x,List()) -> Set(NumTop))" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set()
 (x,List()) -> Set(NumTop))";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"1\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (a,List()) -> Set()
 (b,List()) -> Set())" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set()
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"1\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(+ $tmp$1 $tmp$2 )\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
"(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"1\n Env = Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))\n Env = Map(b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\norg.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$InitKAddr$@632f19fe";
"(let ((b '(unspecified)))  (let (($_$3 (set! fib (lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))))))  (let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified)))))))\n Env = Map(fib -> (fib,List()), a -> (a,List()))\n  store hash = 1368014491\norg.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$InitKAddr$@632f19fe" -> "(let (($_$3 (set! fib (lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))))))  (let (($tmp$3 (fib 10 )))  (let (($_$2 (set! a $tmp$3)))  (let (($tmp$4 (fib 10000 )))  (let (($_$1 (set! b $tmp$4)))  '(unspecified))))))\n Env = Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))\n  store hash = 1368014491\norg.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$InitKAddr$@632f19fe";
"(let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))" -> "(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))\n Env = Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), fib -> (fib,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$4,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set(NumTop))";
"1\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())" -> "(let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))\n Env = Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()))\n  store hash = 1368014491\nAACKAddr((let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))),Map(x -> (x,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),(if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 )))),Map(x -> (x,List()), $tmp$1 -> ($tmp$1,List()), b -> (b,List()), a -> (a,List()), $tmp$3 -> ($tmp$3,List()), $tmp$4 -> ($tmp$4,List()), fib -> (fib,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List())),
 (x,List()) -> Set(NumTop)
 (a,List()) -> Set(NumTop)
 ($tmp$3,List()) -> Set(NumTop)
 ($tmp$1,List()) -> Set(NumTop)
 ($tmp$2,List()) -> Set(NumTop)
 (fib,List()) -> Set(Clo((lambda (x)  (if (< x 3 ) 1 (let (($tmp$1 (fib (- x 1 ) )))  (let (($tmp$2 (fib (- x 2 ) )))  (+ $tmp$1 $tmp$2 ))))),Map(fib -> (fib,List()), a -> (a,List()), b -> (b,List()))))
 (b,List()) -> Set())";
}

Current State :
State 0---------------------
C :
(let ((id '(unspecified)))  (let ((blur '(unspecified)))  (let ((lp '(unspecified)))  (let (($_$3 (set! id (lambda (x)  x))))  (let (($_$2 (set! blur (lambda (y)  y))))  (let (($_$1 (set! lp (lambda (a n)  (if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))))))))  (lp #f 2 )))))))

E :
Map()

kptr :
org.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$InitKAddr$@2ff55105

next :1
org.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$MT$@5015268b

Current State :
State 1---------------------
C :
(let ((blur '(unspecified)))  (let ((lp '(unspecified)))  (let (($_$3 (set! id (lambda (x)  x))))  (let (($_$2 (set! blur (lambda (y)  y))))  (let (($_$1 (set! lp (lambda (a n)  (if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))))))))  (lp #f 2 ))))))

E :
Map(id -> (id,List()))

kptr :
org.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$InitKAddr$@2ff55105

next :1
org.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$MT$@5015268b

Current State :
State 2---------------------
C :
(let ((lp '(unspecified)))  (let (($_$3 (set! id (lambda (x)  x))))  (let (($_$2 (set! blur (lambda (y)  y))))  (let (($_$1 (set! lp (lambda (a n)  (if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))))))))  (lp #f 2 )))))

E :
Map(id -> (id,List()), blur -> (blur,List()))

kptr :
org.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$InitKAddr$@2ff55105

next :1
org.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$MT$@5015268b

Current State :
State 3---------------------
C :
(let (($_$3 (set! id (lambda (x)  x))))  (let (($_$2 (set! blur (lambda (y)  y))))  (let (($_$1 (set! lp (lambda (a n)  (if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))))))))  (lp #f 2 ))))

E :
Map(id -> (id,List()), blur -> (blur,List()), lp -> (lp,List()))

kptr :
org.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$InitKAddr$@2ff55105

next :1
org.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$MT$@5015268b

Current State :
State 4---------------------
C :
(let (($_$2 (set! blur (lambda (y)  y))))  (let (($_$1 (set! lp (lambda (a n)  (if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))))))))  (lp #f 2 )))

E :
Map(id -> (id,List()), blur -> (blur,List()), lp -> (lp,List()), $_$3 -> ($_$3,List()))

kptr :
org.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$InitKAddr$@2ff55105

next :1
org.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$MT$@5015268b

Current State :
State 5---------------------
C :
(let (($_$1 (set! lp (lambda (a n)  (if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))))))))  (lp #f 2 ))

E :
Map(blur -> (blur,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
org.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$InitKAddr$@2ff55105

next :1
org.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$MT$@5015268b

Current State :
State 6---------------------
C :
(lp #f 2 )

E :
Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
org.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$InitKAddr$@2ff55105

next :1
org.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$MT$@5015268b

Current State :
State 7---------------------
C :
(if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))))

E :
Map(blur -> (blur,List()), n -> (n,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
org.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$MT$@5015268b

Current State :
State 8---------------------
C :
(let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))

E :
Map(blur -> (blur,List()), n -> (n,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
org.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$MT$@5015268b

Current State :
State 9---------------------
C :
y

E :
Map(blur -> (blur,List()), n -> (n,List()), y -> (y,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(y,(let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))),Map(blur -> (blur,List()), n -> (n,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame($tmp$1,(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 10---------------------
C :
(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))

E :
Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
org.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$MT$@5015268b

Current State :
State 11---------------------
C :
x

E :
Map(x -> (x,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(x,(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 12---------------------
C :
(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))

E :
Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
org.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$MT$@5015268b

Current State :
State 13---------------------
C :
y

E :
Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), y -> (y,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(y,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame($tmp$2,(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 14---------------------
C :
(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
org.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$MT$@5015268b

Current State :
State 15---------------------
C :
x

E :
Map(x -> (x,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(x,(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 16---------------------
C :
x

E :
Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(x,(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 17---------------------
C :
(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
org.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$MT$@5015268b

Current State :
State 18---------------------
C :
y

E :
Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), y -> (y,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(y,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame($tmp$2,(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 19---------------------
C :
(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
org.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$MT$@5015268b

Current State :
State 20---------------------
C :
(if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 21---------------------
C :
(let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 22---------------------
C :
y

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), y -> (y,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(y,(let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame($tmp$1,(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 23---------------------
C :
(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))

E :
Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
org.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$MT$@5015268b

Current State :
State 24---------------------
C :
(if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))))

E :
Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 25---------------------
C :
(let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))

E :
Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 26---------------------
C :
y

E :
Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), y -> (y,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(y,(let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame($tmp$1,(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 27---------------------
C :
(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))

E :
Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 28---------------------
C :
(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))

E :
Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 29---------------------
C :
(let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))

E :
Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 30---------------------
C :
(if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))))

E :
Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 31---------------------
C :
x

E :
Map(x -> (x,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(x,(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 32---------------------
C :
(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))

E :
Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 33---------------------
C :
y

E :
Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), y -> (y,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(y,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame($tmp$2,(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$2,(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 34---------------------
C :
(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 35---------------------
C :
(let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 36---------------------
C :
(if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 37---------------------
C :
x

E :
Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(x,(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 38---------------------
C :
(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 39---------------------
C :
(id a )

E :
Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 40---------------------
C :
x

E :
Map(x -> (x,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(x,(id a ),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 41---------------------
C :
(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 42---------------------
C :
(if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 43---------------------
C :
(let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 44---------------------
C :
y

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), y -> (y,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(y,(let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame($tmp$1,(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$1,(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 45---------------------
C :
(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 46---------------------
C :
(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 47---------------------
C :
(let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 48---------------------
C :
(if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 49---------------------
C :
(id a )

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 50---------------------
C :
x

E :
Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(x,(id a ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 51---------------------
C :
(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 52---------------------
C :
y

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), y -> (y,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(y,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame($tmp$2,(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 53---------------------
C :
(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 54---------------------
C :
(let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 55---------------------
C :
(if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 56---------------------
C :
(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 57---------------------
C :
x

E :
Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(x,(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 58---------------------
C :
(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 59---------------------
C :
(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 60---------------------
C :
y

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), y -> (y,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(y,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame($tmp$2,(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$2,(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 61---------------------
C :
(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 62---------------------
C :
(let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :4
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 63---------------------
C :
(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :4
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 64---------------------
C :
(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :4
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 65---------------------
C :
(if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :4
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 66---------------------
C :
(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :4
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 67---------------------
C :
x

E :
Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(x,(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :4
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 68---------------------
C :
(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :4
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 69---------------------
C :
x

E :
Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(x,(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 70---------------------
C :
(id a )

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :4
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 71---------------------
C :
x

E :
Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(x,(id a ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :6
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

mis: Set(r, s)
Current State :
State 72---------------------
C :
y

E :
Map(blur -> (blur,List()), n -> (n,List()), y -> (y,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(y,(let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))),Map(blur -> (blur,List()), n -> (n,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame($tmp$1,(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 73---------------------
C :
y

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), y -> (y,List()), a -> (a,List()), s -> (s,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(y,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :4
Pointed(LetFrame($tmp$3,(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$3,(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$3,(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$3,(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 74---------------------
C :
(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :4
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 75---------------------
C :
(if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 76---------------------
C :
(let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 77---------------------
C :
y

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), y -> (y,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(y,(let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame($tmp$1,(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 78---------------------
C :
(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 79---------------------
C :
(if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 80---------------------
C :
(let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 81---------------------
C :
y

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), y -> (y,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(y,(let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame($tmp$1,(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$1,(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 82---------------------
C :
(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 83---------------------
C :
(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 84---------------------
C :
(let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 85---------------------
C :
(if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 86---------------------
C :
(id a )

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 87---------------------
C :
x

E :
Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(x,(id a ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 88---------------------
C :
(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 89---------------------
C :
y

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), y -> (y,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(y,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame($tmp$2,(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 90---------------------
C :
(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 91---------------------
C :
(if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 92---------------------
C :
(let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 93---------------------
C :
y

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), y -> (y,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(y,(let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame($tmp$1,(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$1,(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$1,(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 94---------------------
C :
(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 95---------------------
C :
(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 96---------------------
C :
(id a )

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 97---------------------
C :
x

E :
Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(x,(id a ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 98---------------------
C :
(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 99---------------------
C :
y

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), y -> (y,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(y,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame($tmp$2,(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$2,(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 100---------------------
C :
(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 101---------------------
C :
(if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 102---------------------
C :
(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 103---------------------
C :
(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 104---------------------
C :
(let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 105---------------------
C :
(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 106---------------------
C :
(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 107---------------------
C :
(let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 108---------------------
C :
(if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 109---------------------
C :
(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 110---------------------
C :
(id a )

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 111---------------------
C :
x

E :
Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(x,(id a ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :5
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

mis: Set(r, s)
Current State :
State 112---------------------
C :
(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 113---------------------
C :
y

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), y -> (y,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(y,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
Pointed(LetFrame($tmp$3,(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 114---------------------
C :
(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 115---------------------
C :
(if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 116---------------------
C :
(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 117---------------------
C :
(let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 118---------------------
C :
(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 119---------------------
C :
y

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), y -> (y,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(y,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame($tmp$3,(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$3,(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 120---------------------
C :
(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 121---------------------
C :
(if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 122---------------------
C :
(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 123---------------------
C :
(let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 124---------------------
C :
x

E :
Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(x,(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 125---------------------
C :
(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 126---------------------
C :
y

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), y -> (y,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(y,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame($tmp$2,(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$2,(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$2,(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 127---------------------
C :
(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 128---------------------
C :
(if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 129---------------------
C :
(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 130---------------------
C :
(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 131---------------------
C :
(id a )

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 132---------------------
C :
x

E :
Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(x,(id a ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :6
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

mis: Set(r, s)
Current State :
State 133---------------------
C :
(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 134---------------------
C :
y

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), y -> (y,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(y,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame($tmp$3,(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$3,(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$3,(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 135---------------------
C :
(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 136---------------------
C :
(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :4
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 137---------------------
C :
(if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :4
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 138---------------------
C :
(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :4
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 139---------------------
C :
(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :4
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 140---------------------
C :
(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :4
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 141---------------------
C :
(let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :4
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 142---------------------
C :
(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :4
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 143---------------------
C :
(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 144---------------------
C :
(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 145---------------------
C :
(let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 146---------------------
C :
(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 147---------------------
C :
x

E :
Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(x,(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 148---------------------
C :
x

E :
Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(x,(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 149---------------------
C :
(id a )

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :4
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 150---------------------
C :
x

E :
Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(x,(id a ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :10
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

mis: Set($tmp$4, r, s)
Current State :
State 151---------------------
C :
(not $tmp$4 )

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), $tmp$4 -> ($tmp$4,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :4
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 152---------------------
C :
(not $tmp$4 )

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), $tmp$4 -> ($tmp$4,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 153---------------------
C :
(not $tmp$4 )

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), $tmp$4 -> ($tmp$4,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :3
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 154---------------------
C :
(not $tmp$4 )

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), $tmp$4 -> ($tmp$4,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :4
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 155---------------------
C :
x

E :
Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(x,(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :4
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 156---------------------
C :
(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 157---------------------
C :
(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :5
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 158---------------------
C :
(if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :5
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 159---------------------
C :
(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :5
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 160---------------------
C :
(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :5
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 161---------------------
C :
(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :5
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 162---------------------
C :
(let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :5
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 163---------------------
C :
(id a )

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :5
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 164---------------------
C :
x

E :
Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(x,(id a ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :11
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

mis: Set($tmp$4, r, s)
Current State :
State 165---------------------
C :
(not $tmp$4 )

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), $tmp$4 -> ($tmp$4,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 166---------------------
C :
(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :5
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 167---------------------
C :
(not $tmp$4 )

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), $tmp$4 -> ($tmp$4,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :5
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 168---------------------
C :
x

E :
Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(x,(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :5
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 169---------------------
C :
(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 170---------------------
C :
(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :6
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 171---------------------
C :
(if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :6
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 172---------------------
C :
(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :6
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 173---------------------
C :
(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :6
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 174---------------------
C :
(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :6
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 175---------------------
C :
(let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :6
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 176---------------------
C :
(id a )

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :6
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 177---------------------
C :
x

E :
Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(x,(id a ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :12
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

mis: Set($tmp$4, r, s)
Current State :
State 178---------------------
C :
(not $tmp$4 )

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), $tmp$4 -> ($tmp$4,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :2
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 179---------------------
C :
(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :6
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 180---------------------
C :
(not $tmp$4 )

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), $tmp$4 -> ($tmp$4,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :6
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 181---------------------
C :
x

E :
Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(x,(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :6
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 182---------------------
C :
(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
org.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$MT$@5015268b

Current State :
State 183---------------------
C :
(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :7
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 184---------------------
C :
(if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :7
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 185---------------------
C :
(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :7
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 186---------------------
C :
(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :7
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 187---------------------
C :
(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :7
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 188---------------------
C :
(let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :7
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 189---------------------
C :
(id a )

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :7
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 190---------------------
C :
x

E :
Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(x,(id a ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :13
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(r,(let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame(s,(let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

mis: Set($tmp$4, r, s)
Current State :
State 191---------------------
C :
(not $tmp$4 )

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), $tmp$4 -> ($tmp$4,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
org.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$MT$@5015268b

Current State :
State 192---------------------
C :
(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 ))))

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :7
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 193---------------------
C :
(not $tmp$4 )

E :
Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), $tmp$4 -> ($tmp$4,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :7
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 194---------------------
C :
x

E :
Map($tmp$2 -> ($tmp$2,List()), x -> (x,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(x,(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :7
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map(blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))
Pointed(LetFrame($tmp$4,(not $tmp$4 ),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))),HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )),Map($tmp$2 -> ($tmp$2,List()), blur -> (blur,List()), n -> (n,List()), $tmp$1 -> ($tmp$1,List()), a -> (a,List()), s -> (s,List()), $tmp$3 -> ($tmp$3,List()), $_$1 -> ($_$1,List()), r -> (r,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))))

Current State :
State 195---------------------
C :
(id a )

E :
Map(blur -> (blur,List()), n -> (n,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr((if (<= n 1 ) (id a ) (let (($tmp$1 (blur id )))  (let ((r ($tmp$1 #t )))  (let (($tmp$2 (blur id )))  (let ((s ($tmp$2 #f )))  (let (($tmp$3 (blur lp )))  (let (($tmp$4 ($tmp$3 s (- n 1 ) )))  (not $tmp$4 )))))))),(lp #f 2 ),Map(blur -> (blur,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
org.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$MT$@5015268b

Current State :
State 196---------------------
C :
x

E :
Map(x -> (x,List()), blur -> (blur,List()), n -> (n,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List()))

kptr :
HCFAKAddr(x,(id a ),Map(blur -> (blur,List()), n -> (n,List()), a -> (a,List()), $_$1 -> ($_$1,List()), lp -> (lp,List()), $_$2 -> ($_$2,List()), $_$3 -> ($_$3,List()), id -> (id,List())))

next :1
org.ucombinator.scheme.cfa.kcfa.PointerCESKMachinery$MT$@5015268b

Configurations explored: 90
States explored: 197
return: 57
Mismatch Return: 7
Mismatch: 0.12280701754385964
